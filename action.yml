name: 'Sphinx Azure Upload'
description: 'Installs Sphinx, builds HTML docs, and uploads to Azure Blob storage'
author:  'Minerva Gomez Cuenca'
inputs: 
  working_directory:
    description: 'Documents root rolder name'
    required: true
  blob_endpoint:
    description: 'Azure blob endpoint'
    required: true
  target_location:
    description: 'Target Location and repo identifier'
    required: true
  blob_container_name:
    description: 'Azure container name'
    required: true
  index_html:
    description: 'Entry point for accessing the site'
    default: index.html
    required: false
  tar_file_name:
    description: 'Unique TAR file name'
    required: true
  service_principal_credentials:
    description: "BLOB_JSON_SERVICE_PRINCIPAL_CREDENTIALS"
    required: true
  account_name:
    description: "Azure Account name"
    required: true
  cdn_profile_name: 
    description: "Blob container CDN web profile name"
    required: true
  cdn_endpoint_name:
    description: "Blob cdn end point name"
    required: true
  resource_group:
    description: "Resource group name"
    required: true
  pr_update_token:
    description: "Github token"
    required: true

outputs: 
  yourlink:
    description: 'This is the entry point to the generated documents'
    value: ${{ steps.docsbuild.outputs.yourlink }}

runs:
  using: 'composite'
  steps:
    - name: Build docs - html - no break
      id: build-docs
      shell: bash
      env:
        working_directory: ${{ inputs.working_directory }}
      run: |
        ls -l; cd ${{ env.working_directory }}; whoami
        make clean
        make htmlnobreak
        make text
        ls -l

    - name: Generate TAR file
      env:
        working_directory: ${{ inputs.working_directory }}
        blob_endpoint: ${{ inputs.blob_endpoint }}
        target_location: ${{ inputs.target_location }}
        blob_container_name: ${{ inputs.blob_container_name }}
        index_html: ${{ inputs.index_html }}
        tar_file_name: ${{ inputs.tar_file_name }} 
      shell: bash
      run: |
        cd ${{ env.working_directory }}
        echo "LINK_TO_TAR=${{ env.blob_endpoint }}/${{ env.target_location }}/DocsTextTar/${{ env.tar_file_name }}.tar.gz" >> $GITHUB_ENV      
        tar -czvf ${{ env.tar_file_name }}.tar.gz _build/text/ && mkdir _tar && mv ${{ env.tar_file_name }}.tar.gz _tar/ && ls -l 

    # Generates Unique folder name
    - name: Get current date to generate partial url link
      shell: bash 
      
      id: date
      run: |
        echo "THIS_RUN=$(TZ='America/Los_Angeles' date +'%B%d-%H%M%S')" >> $GITHUB_ENV
        
    
    - name: Create staging documents URL      
      shell: bash 
      env:
        working_directory: ${{ inputs.working_directory }}
        blob_endpoint: ${{ inputs.blob_endpoint }}
        target_location: ${{ inputs.target_location }}
        blob_container_name: ${{ inputs.blob_container_name }}
        index_html: ${{ inputs.index_html }}
        tar_file_name: ${{ inputs.tar_file_name }}      
      run: |
        echo "DESTINATION_PATH=${{ env.blob_container_name }}/${{ env.target_location }}/${{env.THIS_RUN}}/${{ env.working_directory }}" >> $GITHUB_ENV
        echo "LINK_URL=${{ env.blob_endpoint }}/${{ env.target_location }}/${{env.THIS_RUN}}/${{ env.working_directory }}/${{ env.index_html }}" >> $GITHUB_ENV

    # Provides the final link to the publicly accessible files.
    - name: YOUR LINK
      shell: bash 
      run: echo "${{ env.LINK_URL }}"

    # AZURE LOGIN:
    - uses: azure/login@v1
      with:
          creds: ${{ env.service_principal_credentials }} 

    - uses: azure/CLI@v1
      env:
        working_directory: ${{ inputs.working_directory }}
        blob_endpoint: ${{ inputs.blob_endpoint }}
        target_location: ${{ inputs.target_location }}
        blob_container_name: ${{ inputs.blob_container_name }}
        index_html: ${{ inputs.index_html }}
        tar_file_name: ${{ inputs.tar_file_name }}
        service_principal_credentials: ${{ inputs.service_principal_credentials }}
        account_name: ${{ inputs.account_name }}
        cdn_profile_name: ${{ inputs.cdn_profile_name }}
        cdn_endpoint_name: ${{ inputs.cdn_endpoint_name }}
        resource_group: ${{ inputs.resource_group }}
        pr_update_token: ${{ inputs.pr_update_token }}          
      with:
        inlineScript: |
            az storage blob upload-batch -s ${{ env.working_directory }} --account-name ${{ env.account_name }}  --auth-mode key -d ${DESTINATION_PATH}
            az storage blob upload-batch -s ${{ env.working_directory }}/_tar --account-name ${{ env.account_name }} --overwrite true --auth-mode key -d ${{ env.blob_container_name }}/${{ env.target_location }}/Test
            az cdn endpoint purge --content-paths  "/*" --profile-name ${{ env.cdn_profile_name }} --name ${{ env.cdn_endpoint_name }} --resource-group ${{ env.resource_group }}
            az logout

    - name: YOUR TAR FILE LINK
      shell: bash 
      run: echo "${{ env.LINK_TO_TAR }}"
        

    # Updates PR
    - uses: mshick/add-pr-comment@v1
      env:
          GITHUB_TOKEN: ${{ env.pr_update_token }}
      with:
          message: |
            [->> Link to documents preview](${{ env.LINK_URL }})**

